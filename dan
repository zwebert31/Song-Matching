#! /usr/bin/python
#Zach Webert
#Katie Gilligan
#Sam Lynch
#Kevin Doherty

import sys
import wave
import numpy
import os.path
import scipy.io.wavfile
import scipy.spatial.distance as dist
import os
import uuid
from multiprocessing.pool import ThreadPool
from subprocess import call
import subprocess 
import time

# Size of our chunks
CHUNK_SIZE = 4410

# CD quality sampling rate used to determine chunk time
CD_SAMPLE_RATE = 44100.0

# Minimum length of matches in seconds
MIN_MATCH_LENGTH = 5

# How close hashes need to be to be considered a match
DISTANCE_THRESHOLD = 0.001

# Number of decimal places to round to
HASH_PRECISION = 1

# Time each chunk. This is based on the size of chunks
CHUNK_TIME = float(CHUNK_SIZE) / CD_SAMPLE_RATE

# Size of fragments
FRAGMENT_SIZE = int(MIN_MATCH_LENGTH / CHUNK_TIME)

# Supported file extensions
SUPPORTED_EXTENSIONS = [".wav", ".mp3", ".ogg"]

# Cache which stores data about each song
# Key is the absolute path of the file
# and value is the data
johnnySongDataCache = {}

# Enable / disables debug prints
debug = False

#Print an error to standard error
#ERROR CODE 1: Invalid command line
#ERROR CODE 2: Invalid file format
def throwError(code, arg=""):
    if code == 1:
        sys.stderr.write("ERROR: incorrect command line\n")
    elif code == 2:
        sys.stderr.write("ERROR: " + formatFileName(arg)
                         + " is not a supported format\n")
    else:
        sys.stderr.write("ERROR: there was a problem\n")
    exit(code)

#returns the relative file name of the file
def formatFileName(path):
    tmp = []

    for i in range (0, len(path)):
        if path[i] == '/':
           tmp = []
        else:
           tmp.append(path[i])

    formatted_str = ''.join(tmp)
    return formatted_str

#returns the extension of the file
def getExtension(path):
    return os.path.splitext(path)[1]

#returns True if extension is supported, False if not supported
def isSupportedExtension(path):
    extension = getExtension(path)
    return extension in SUPPORTED_EXTENSIONS

# Returns a path to a wav file.
# If the file is a wav file already, the input path is returned
# Otherwise the file is converted to a .wav file and stored in a /tmp path
def fileToWave(filePath):

    fileExtension = getExtension(filePath)

    if fileExtension == ".wav":
        return filePath

    basePath = "/tmp/waveFiles"
    tmpPath = os.path.join(basePath + str(uuid.uuid4()))

    if not os.path.exists(tmpPath):
        os.makedirs(tmpPath)

    formattedFileName = formatFileName(filePath)
    outputPath = ""

    if fileExtension == ".ogg":
        outputPath = os.path.join(tmpPath, "%s.ogg" % formattedFileName[:-4])
        call(["/usr/bin/oggdec", filePath, "-o", outputPath, "--quiet"])

    if fileExtension == ".mp3":
        outputPath = os.path.join(tmpPath, "%s.mp3" % formattedFileName[:-4])
        call(["/course/cs4500f14/bin/lame","--resample", "44.1", "--decode", \
         "--silent", filePath, outputPath])

    return outputPath 

def resampleWav(path):
    basePath = "/tmp/resample"
    tmpPath = os.path.join(basePath + str(uuid.uuid4()))

    if not os.path.exists(tmpPath):
        os.makedirs(tmpPath)

    outputPath = os.path.join(tmpPath, formatFileName(path))
    call(["/usr/bin/mplayer", "-really-quiet", "-vc", "null", "-vo", \
        "null", path, "-af", "resample=41000", "-ao", \
        "pcm:file=%s" % outputPath], stdout=open(os.devnull, "w"), \
        stderr=subprocess.STDOUT)
    return outputPath

#returns an dictionary with the following elements: 
#energies -> array of energies in chronological order by 
#            dividing the audio into chunkSize fragments, 
#            at CHUNK_TIME second intervals
#hashDict -> dictionary mapping hashes of MIN_MATCH_LENGTH seconds of 
#            audio data, to an array of indices where the hash occurs
#hashArr  -> array of hashes of MIN_MATCH_LENGTH seconds of audio data 
#            in chronological order at CHUNK_TIME second intervals
def getInfo(path, chunkSize):
    #if the result has already been computed, return the result from the cache
    if path in johnnySongDataCache:
        return johnnySongDataCache[path]

    #convert file to wav if neccessary, returns path to converted file
    tempWavPath = fileToWave(path)

    #read the wav data as tuple (samplingRate, array of samples)
    wave_results = scipy.io.wavfile.read(tempWavPath)
    samplingRate = wave_results[0]
    wave_data = wave_results[1]

    if samplingRate != 44100:
        tempWavPath = resampleWav(tempWavPath)
        wave_results = scipy.io.wavfile.read(tempWavPath)
        samplingRate = wave_results[0]
        wave_data = wave_results[1]

    #calculate the number of samples
    sampleCount = len(wave_data)

    #determine stereo or mono, and convert to mono
    channels = wave.open(tempWavPath, 'r').getnchannels()
    if (channels == 2):
        # Convert stereo to mono by averaging the channels 
        wave_mono = wave_data.mean(axis=1)  
    else:
        #signal is already in mono
        wave_mono = wave_data

    #dictionary mapping hashes of MIN_MATCH_LENGTH seconds of 
    #audio data, to an array of indices where the hash occurs
    hashDict = {}
    
    #array of energies in chronological order at CHUNK_TIME second intervals
    energies = []

    #array of hashes of MIN_MATCH_LENGTH seconds of audio data 
    #in chronological order at CHUNK_TIME second intervals
    hashArr = []

    #loop through all chunkSize chunks of the song
    for i in range(0, sampleCount / chunkSize):

        #update start and end bounds of the chunk we are looking at
        startBounds = i * chunkSize
        endBounds = (i+1) * chunkSize 

        #take the fft of the chunk
        fftChunk = numpy.fft.fft(wave_mono[startBounds:endBounds])          
        #take the magnitude of the complex fft result
        fftChunk = numpy.absolute(fftChunk)
        #calculate the power of each fft bin
        fftChunk = numpy.array(fftChunk)**2
        #find the max value in the fft
        fftMax = numpy.amax(fftChunk)

         #prevent divide by 0 errors
        if (fftMax == 0):
            fftMax = 1
   
        #normalize by dividing each element by the max value 
        normalizeValue = len(fftChunk) * fftMax  
        fftChunk = [x / normalizeValue for x in fftChunk]

        #sum the power of each fft bin to get total energy for chunk
        energies.append(numpy.sum(fftChunk))
        
        #calculate fragment_size hashes at chunkSize intervals
        if (i > FRAGMENT_SIZE):
            #round the hash to the desired hash precision
            hashPrint = round(hash(energies[i - FRAGMENT_SIZE : i]), \
                HASH_PRECISION)
            #add the hash to the dictionary
            hashDict.setdefault(hashPrint,[]).append(i - FRAGMENT_SIZE)
            #append the hash to the chronological array
            hashArr.append(hashPrint)

    result = { "energies":energies, "hashDict":hashDict, "hashArr":hashArr }
    #store the result in the cache
    johnnySongDataCache[path] = result

    return result

#returns a hash value for an array of energies
def hash(energyChunkArray):
    #sum each element increasing the weight for each element
    weight = 1
    hashValue = 0
    for x in energyChunkArray:
        hashValue += (x * weight)
        weight += 10

    return hashValue

#check if the files at the given paths are a match
def checkMatch(path1, path2):
    #check if given files are in a supported format
    if not isSupportedExtension(path1):
    	throwError(2, path1)
    if not isSupportedExtension(path2):
    	throwError(2, path2)

    #get the info for each song
    info1 = getInfo(path1, CHUNK_SIZE)
    info2 = getInfo(path2, CHUNK_SIZE) 

    totalTime = 0
    #loop through each chunk in song 1
   
    for i in range(0, len(info1["energies"]) - FRAGMENT_SIZE - 1):
        #find hash matches in song 2
        checkList = info2["hashDict"].get(info1["hashArr"][i])
        
        #loop through hash matches and determine if they are actual matches
        if checkList:
            for index in checkList:
                #take the euclidean distance of the two vectors
                distance = dist.euclidean( \
                    info1["energies"][i:i+FRAGMENT_SIZE], \
                    info2["energies"][index:index+FRAGMENT_SIZE])

                #if the distance is below our threshold return a match
                if distance < DISTANCE_THRESHOLD:
                    print ("MATCH " + formatFileName(path1) + " " + 
                    formatFileName(path2) + " " + str(i * CHUNK_TIME) + 
                    " " + str(index * CHUNK_TIME))
                    if debug:
                        print "Distance: " + str(distance)    	          
                    return           
#MAIN

#check for valid command line input
if len(sys.argv) != 5 and len(sys.argv) != 6:
    throwError(1)    

#if debug flag is present, allow 6 arguments
if len(sys.argv) == 6:
    if sys.argv[5] == '--debug':
        debug = True
    else: 
        throwError(1)

#check that -f and -d flags are present and in the right location
if ((sys.argv[1] != '-f' and sys.argv[1] != '-d') or
   (sys.argv[3] != '-f' and sys.argv[3] != '-d')):
    throwError(1)

#declare two arrays of file paths to compare
pathList1 = []
pathList2 = []

#enumerate the path lists
if (sys.argv[1] == '-f'):
    pathList1.append(sys.argv[2])
elif (sys.argv[1] == '-d'):
    if os.path.exists(sys.argv[2]) and os.path.isdir(sys.argv[2]):
        files = os.listdir(sys.argv[2])
        for f in files:
            pathList1.append(os.path.join(sys.argv[2], f))        
    else:
        throwError(1)    
if (sys.argv[3] == '-f'):
    pathList2.append(sys.argv[4])
elif (sys.argv[3] == '-d'):
    if os.path.exists(sys.argv[4]) and os.path.isdir(sys.argv[4]):
        files = os.listdir(sys.argv[4])
        for f in files:
            pathList2.append(os.path.join(sys.argv[4], f))        
    else:
        throwError(1)

#check each file in the path list against every file in the other list
for s1 in pathList1:
    for s2 in pathList2:
        checkMatch(s1, s2)

#exit with status of 0 as specified in directions
exit(0)
